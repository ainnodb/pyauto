#!/bin/bash
#=============================================================================
# HEADER
#=============================================================================
#% SYNOPSIS
#%    ${prog}
#%
#% DESCRIPTION
#%    Script to backup mysql database 
#%
#% ARGUMENTS
#%    directory
#%
#% EXAMPLES
#%    ${prog}  /backup
#%
#=============================================================================
#  HISTORY
#     20220104  innod motingxia@163.com
#=============================================================================
#  NOTES
#=============================================================================
# END_OF_HEADER
#=============================================================================

#=============================================================================
#  IMPORT COMMON FUNCTIONS AND VARIABLES
#=============================================================================
RUNDIR="$(cd "$(dirname "${0}")" && pwd)"
if [ -z "${FUNCTIONS_IMPORTED}" ]; then
    . ${RUNDIR}/functions.ksh
fi

if [ -z "${MYSQLFUNCTIONS_IMPORTED}" ]; then
    . ${RUNDIR}/functions_mysql.ksh
fi
#=============================================================================
#  FUNCTIONS
#=============================================================================
do_exit() {
    RC=$1
    echo "$RC" >/tmp/RC.$$
    exit $RC
}

if [ $# -lt 1 ]; then
    usage
    exit 8
fi

RC=0

scriptname=$(basename $0)
starttime=$(date +%s)
log_info "start time ${starttime}"
if ! [ -f ${LOG_FILE_DIR}/${scriptname}.log  ];then
    touch ${LOG_FILE_DIR}/${scriptname}.log
    LogFile=${LOG_FILE_DIR}/${scriptname}.log
else
    rm -rf ${LOG_FILE_DIR}/${scriptname}.log
    touch ${LOG_FILE_DIR}/${scriptname}.log
    LogFile=${LOG_FILE_DIR}/${scriptname}.log
fi
export LogFile=${LOG_FILE_DIR}/${scriptname}.log
log_info  "logfile: ${LogFile}"

#=============================================================================
#  main
#=============================================================================
{
runas_root
. ~/.bash_profile

if which xtrabackup 2>/dev/null; then
    log_info "xtrabackup is already install on host ${HOSTNAME}"
else
    log_warning "xtrabackup is not install on host ${HOSTNAME}"
    sh ${RUNDIR}/backuptool
fi
. ~/.bash_profile
#prepare backup need paramter

backupTargetPath=$1

# port=$(ip add|grep -i inet|grep -i 192.168.68|cut -d '.'  -f4|cut -d'/' -f1)
# let port=3300+$(nslookup $(hostname)|grep -i Address|awk '{print $2}'|grep -v '#'|cut -d. -f4)
# export mysqlPort=${port}
# log_info "mysql port is :${mysqlPort}"
# export installPath=/data
# export data_default=${installPath}/${mysqlPort}
# export mysql_data_dir=${data_default}/data
# export mysql_binlog_dir=${data_default}/binlog
# export mysql_log_dir=${data_default}/logs
# export mysql_data_tmp=${data_default}/tmp
# export mysql_undo_dir=${data_default}/undo
# export mysqlcnf=${data_default}/my.cnf

# mkdir -p ${data_default}
# mkdir -p ${mysql_data_dir}
# mkdir -p ${mysql_binlog_dir}
# mkdir -p ${mysql_data_dir}
# mkdir -p ${mysql_log_dir}
# mkdir -p ${mysql_data_tmp}
# mkdir -p ${mysql_undo_dir}
sh ${RUNDIR}/mysq setvar
. ~/.bash_profile
env|grep -i msyql
env|grep -i data
if [[ $(du -b ${mysqlcnf}|cut -d' ' -f1) != "0" ]]; then
    log_info "${mysqlcnf} exist"
else
    log_warning "${mysqlcnf} not exist need generate!"
    Generatet_Mysql_cnf
fi
log_info "delete files on the target host"
log_info "delete ${mysql_undo_dir} "
rm -rf ${mysql_undo_dir}/*
log_info "delete ${mysql_binlog_dir} "
rm -rf ${mysql_binlog_dir}/*
log_info "delete ${mysql_data_dir} "
rm -rf ${mysql_data_dir}/*
log_info "delete ${mysql_log_dir} "
rm -rf ${mysql_log_dir}/*


log_info "stop mysql"
if [ $(ps -ef|grep -i mysql|grep -v grep|grep -v restore|wc -l) -eq 0 ];then 
    log_info "mysql is not running"
else
    ${RUNDIR}/deploy stop
    # for i in $(ps -ef|grep -i mysql|grep -v grep|grep -v restore|awk '{print $2}');do kill -9 $i;done
    # if [ $? == "0" ]; then
    #     log_info   "mysql is stopped on the host"
    # fi
fi

#stop mysql in the target system

# ssh ${targethost} "for i in $(ps -ef|grep -i mysql|grep -v grep |awk '{print $2}');do kill -9 $i;done"

# defaultpath="$(ps -ef|grep -i socket|cut -d'=' -f3|cut -d'/' -f1,2,3)"
# defaultfile=$(find /data -name my.cnf)
if [ -f /tmp/restore ]; then
    rm -rf /tmp/restore
fi
echo "xtrabackup --defaults-file=${mysqlcnf} --copy-back --target-dir=${backupTargetPath}" >>/tmp/restore

log_info "start restore backup on ${targethost} on target dir ${backupTargetPath}"
log_info "defaults-file:  ${mysqlcnf}"
log_info "target-dir:  ${backupTargetPath}"
chmod +x /tmp/restore
eval /tmp/restore
if [ $? -eq 0 ];then
    log_info "xtrabackup restore done on host ${HOSTNAME} in ${backupTargetPath}"
    rm -rf /tmp/restore
else
    do_exit 8
fi
touch ${mysql_log_dir}/{error.log,slow.log}
touch ${mysql_data_dir}/mysql.pid
chown -R  mysql:mysql ${data_default}
chmod -R 775 ${data_default}

echo "${mysql_pid_dir}" >/tmp/pid  #pass mysql_pid_dir to replicate running host.


if [ -L /tmp/mysql${mysqlPort}.sock ];then
    unlink /tmp/mysql${mysqlPort}.sock
fi
if [ -L /tmp/mysqlx${mysqlPort}.sock ];then
    unlink /tmp/mysqlx${mysqlPort}.sock
fi
ln -sf  ${mysql_data_dir}/mysql.sock /tmp/mysql${mysqlPort}.sock
ln -sf  ${mysql_data_dir}/mysqlx.sock /tmp/mysqlx${mysqlPort}.sock

log_info "start mysql after restore"
log_info "mysql configure: ${mysqlcnf}"
# (mysqld_safe --defaults-file=${mysqlcnf} &) 2>/dev/null 1>/dev/null
sh ${RUNDIR}/deploy start
# wait
# if [ $(ps -ef|grep -i mysql|grep -v grep|wc -l) -eq 2 ];then
#     log_info "mysql is running "
# # else 
# #     log_error "ERROR,MySql is not running,pls double check" 
# #     do_exit 8
# fi
if ! which mail;then
    mymail
fi 

} 2>&1 | tee -a $LogFile

if [ -f /tmp/RC.$$ ]; then
    RC=$(cat /tmp/RC.$$)
    rm -f /tmp/RC.$$
fi
log_info "RC=${RC}"
if [ "$RC" == "0" ]; then
    log_info   "OK: EndofScript ${scriptname} "    | tee -a $LogFile
else
    log_error  "ERROR: EndofScript ${scriptname} " | tee -a $LogFile
fi

ende=$(date +%s)
diff=$((ende - starttime))
log_info     "$(date)   Runtime      :   $diff"  | tee -a $LogFile
log_info     "Save log to ${LogFile}         "   | tee -a $LogFile
echo -e "restore mysqldb  on ${starttime}"|mail -s "mysql retore result RC=$RC on $(hostname)" motingxia@163.com  |tee -a $LogFile
logrename  ${LogFile}
exit ${RC}