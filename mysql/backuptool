#!/bin/bash
#=============================================================================
# HEADER
#=============================================================================
#% SYNOPSIS
#%    ${prog}
#%
#% DESCRIPTION
#%    Script to backup mysql database 
#%
#% ARGUMENTS
#%    N.a
#%
#% EXAMPLES
#%    ${prog} 
#%
#=============================================================================
#  HISTORY
#     20220104  innod motingxia@163.com
#=============================================================================
#  NOTES
#=============================================================================
# END_OF_HEADER
#=============================================================================

#=============================================================================
#  IMPORT COMMON FUNCTIONS AND VARIABLES
#=============================================================================
RUNDIR="$(cd "$(dirname "${0}")" && pwd)"
if [ -z "${FUNCTIONS_IMPORTED}" ]; then
    . ${RUNDIR}/functions.ksh
fi

#=============================================================================
#  FUNCTIONS
#=============================================================================
do_exit() {
    RC=$1
    echo "$RC" >/tmp/RC.$$
    exit $RC
}

if [ $# -gt 1 ]; then
    usage
    exit 8
fi

RC=0

scriptname=$(basename $0)
starttime=$(date +%s)
log_info "start time ${starttime}"
if ! [ -f ${LOG_FILE_DIR}/${scriptname}.log  ];then
    touch ${LOG_FILE_DIR}/${scriptname}.log
    LogFile=${LOG_FILE_DIR}/${scriptname}.log
else
    rm -rf ${LOG_FILE_DIR}/${scriptname}.log
    touch ${LOG_FILE_DIR}/${scriptname}.log
    LogFile=${LOG_FILE_DIR}/${scriptname}.log
fi
export LogFile=${LOG_FILE_DIR}/${scriptname}.log
log_info  "logfile: ${LogFile}"

#=============================================================================
#  FUNCTIOversion_select
#=============================================================================
version_select()
{
log_info "you can select following version:" 
log_info "please input verson like 8.0.18 "
echo -e "===============================================================================================\n"  
echo -e "\e[1;32m 8.0.14   8.0.22-15   8.0.23-16 8.0.25-17  8.0.26-18  8.0.27-19  8.0.28-20  8.0.28-21 \e[0m" 
#echo -e "\e[1;32m 5.7.9 5.7.10 5.7.11 5.7.12 5.7.13  5.7.14 5.7.15 5.7.16 5.7.17 5.7.18 5.7.19 5.7.20 \e[0m" 
#echo -e "\e[1;32m 5.7.21 5.7.22 5.7.23 5.7.24 5.7.25  5.7.26 5.7.27 5.7.28 5.7.29 5.7.30 5.7.31       \e[0m" 
echo -e "===============================================================================================\n"
read -p "Which version do you want to insatll:  " VERISON
log_info "your are going to download percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz"
}

download(){
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.14/binary/tarball/percona-xtrabackup-8.0.14-Linux-x86_64.glibc2.12.tar.gz
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.22-15/binary/tarball/percona-xtrabackup-8.0.22-15-Linux-x86_64.glibc2.17.tar.gz    
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.23-16/binary/tarball/percona-xtrabackup-8.0.23-16-Linux-x86_64.glibc2.17.tar.gz
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.25-17/binary/tarball/percona-xtrabackup-8.0.25-17-Linux-x86_64.glibc2.17.tar.gz
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.26-18/binary/tarball/percona-xtrabackup-8.0.26-18-Linux-x86_64.glibc2.17.tar.gz
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.27-19/binary/tarball/percona-xtrabackup-8.0.27-19-Linux-x86_64.glibc2.17.tar.gz
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.28-20/binary/tarball/percona-xtrabackup-8.0.28-20-Linux-x86_64.glibc2.17.tar.gz
wget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.28-21/binary/tarball/percona-xtrabackup-8.0.28-21-Linux-x86_64.glibc2.17.tar.gz
}

#=============================================================================
#  install_xtrabackup
#=============================================================================
install_xtrabackup(){
#check source percona-xtrabackup exist
version_select
if [ -e ${DOWNLOADDIR}/percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz  ];then
    log_info "percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz alreay exist in ${DOWNLOADDIR}percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz"
else 
    mywget https://downloads.percona.com/downloads/Percona-XtraBackup-LATEST/Percona-XtraBackup-8.0.23-16/binary/tarball/percona-xtrabackup-8.0.23-16-Linux-x86_64.glibc2.17.tar.gz percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz
fi

#extract tar.gz file
if  [ ! -d ${installPath}/percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz ] ;then
    log_info "Start extract percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz"
    tar -zxvf ${DOWNLOADDIR}/percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz -C ${installPath}/ &> /dev/null
    mv ${installPath}/percona-xtrabackup-8.0.23-16-Linux-x86_64.glibc2.17 /usr/local/percona
    log_info "extract percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz is exectract to ${installPath}"
fi

if cat ~/.bash_profile|grep -i percona;then
    log_info "mysql already set in ~/.bash_profile"
else
    echo "export PATH=\$PATH:/usr/local/percona/bin" >> ~/.bash_profile
fi

log_info "percona-xtrabackup-${VERISON}-Linux-x86_64.glibc2.17.tar.gz insatll done "
}

#=============================================================================
#  main
#=============================================================================
{
runas_root
if which xtrabackup 1>/dev/null;then
    log_info "xtrabackup is already install on host ${HOSTNAME}"
else
    install_xtrabackup
    if [ $? -eq 0 ];then
    log_info "xtrabackup is install successfully on host ${HOSTNAME}"
    else
        do_exit 8
    fi
fi
. ~/.bash_profile

if ! which mail;then
    mymail
fi 


} 2>&1 | tee -a $LogFile

if [ -f /tmp/RC.$$ ]; then
    RC=$(cat /tmp/RC.$$)
    rm -f /tmp/RC.$$
fi
log_info "RC=${RC}"
if [ "$RC" == "0" ]; then
    log_info   "OK: EndofScript ${scriptname} "    | tee -a $LogFile
else
    log_error  "ERROR: EndofScript ${scriptname} " | tee -a $LogFile
fi

ende=$(date +%s)
diff=$((ende - starttime))
log_info     "$(date)   Runtime      :   $diff"  | tee -a $LogFile
log_info     "Save log to ${LogFile}         "   | tee -a $LogFile
echo -e "mailbackup on ${starttime}"|mail -s "mysql backup result RC=$RC on $(hostname)" motingxia@163.com  |tee -a $LogFile
logrename  ${LogFile}
exit ${RC}