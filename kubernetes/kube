#!/bin/bash
#
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#%    ${prog} st|ms|cl
#%
#% DESCRIPTION
#%    build kubernetes  in three mode
#%
#%          standalone:   one host with all funcation
#%          masterslave:  master and backup
#%          cluster:      kubernetes cluaster more thatn one master and work nodes
#%
#% ARGUMENTS
#%     st ---> standalone
#%     ms ---> masterslave
#%     cl ---> cluster
#%
#% EXAMPLES
#%    ${prog} st
#%
#================================================================
#  HISTORY
#     20220104  innod motingxia@163.com
#================================================================
#  NOTES
#================================================================
# END_OF_HEADER
#================================================================

#================================================================
#  IMPORT COMMON FUNCTIONS AND VARIABLES
#================================================================
RUNDIR="$(cd "$(dirname "${0}")" && pwd)"
if [ -z "${FUNCTIONS_IMPORTED}" ]; then
  . ${RUNDIR}/functions.ksh
fi

#================================================================
#  FUNCTIONS
#================================================================
do_exit() {
  RC=$1
  echo "$RC" >/tmp/RC.$$
  exit $RC
}

if [ $# -gt 1 ]; then
  echo  $#
  usage
  exit 8
fi

PWD=$(pwd)
prog="$(basename ${0})"
RUNDIR="$( cd "$(dirname "${0}")" && pwd )"
if ! [ -d /var/kubernetes ] ; then
  mkdir /var/kubernetes/logs -p
fi
LOG_FILE_DIR="/var/log"
RC=0
starttime=$(date +%s)
scriptname=$(basename $0)
if ! [ -f ${LOG_FILE_DIR}/${scriptname}.log  ];then
  touch ${LOG_FILE_DIR}/${scriptname}.log
  LogFile=${LOG_FILE_DIR}/${scriptname}.log
else
  rm -rf ${LOG_FILE_DIR}/${scriptname}.log
  touch ${LOG_FILE_DIR}/${scriptname}.log
  LogFile=${LOG_FILE_DIR}/${scriptname}.log
fi

export LogFile=${LOG_FILE_DIR}/${scriptname}.log
log_info  "logfile: ${LogFile}"

#================================================================
# kubectl command completion
#================================================================
# kubecommandcompletion() {

#     RC=myinstall bash-completion
#     if [ $RC -eq 0 ]; then
#         source /usr/share/bash-completion/bash_completion
#         source < (kubectl completion bash)
#         kubectl completion bash > ~/.kube/completion.bash.inc
#         source ~/.kube/completion.bash.inet_inc
#         source ~/.bash_profile
#     fi
# }

#================================================================
# set kubernet flanneld network
#================================================================
# flanneld_network
flanneld_network_init() {
  source ~/.bash_profile
  export ETCDCTL_API=2
  export certs="--ca-file=${SSL_DIR}/ca.pem --cert-file=${SSL_DIR}/flanneld.pem --key-file=${SSL_DIR}/flanneld-key.pem"
  export endpoint="--endpoints=${ETCD_SERVERS}"
  etcdctl $certs $endpoint member list && etcdctl $certs $endpoint cluster-health
  if [ $? -eq 0 ]; then
      log_info ""
      log_info "ETCD is configured and ready for configure flanneld network!"
  else
      log_error "check etcd status and try again"
      do_exit 8
  fi
  etcdctl $certs $endpoint get /atomic.io/network/config
  if [ $? -eq 0 ]; then
      log_info "/atomic.io/network/config alread exist"
      RC=0
  else
      netset=$(etcdctl $certs $endpoint mk /atomic.io/network/config '{"Network": "10.244.0.0/16","Backend": {"Type": "vxlan"}}')
      if [ $? -eq 0 ]; then
          log_info "${netset}"
          log_info "ETCD is configured and ready for configure flanneld network!"
      else
          log_error "check etcd status and try again"
          do_exit 8
      fi
  fi
}

kcheck() {
  echo 
  kubectl get cs
  echo
  kubectl cluster-info 
  echo
  kubectl get nodes 
  echo
}
# init running env

#================================================================
# set kubernet standalone mode 
#================================================================
standalone()
{
  log_info "prepare enviroment on node " 
  cp -p ${RUNDIR}/standalone.sh ~
  log_info "  Start build kubernetes standalone"
  if `cat ~/.bash_profile |grep -i standalone.sh` ;then 
      echo "if [ -f ~/standalone.sh ]; then "   >> ~/.bash_profile
      echo "    . ~/standalone.sh"              >> ~/.bash_profile
      echo "fi"                                 >> ~/.bash_profile
  fi

  source  ~/.bash_profile
  sh ${RUNDIR}/standalone.sh
  log_info "prepare certification generate software"
  sh ${RUNDIR}/k8sprepare.sh
  sh ${RUNDIR}/docker_inst.sh
  sh ${RUNDIR}/cfssl_inst.sh
  sh ${RUNDIR}/gencert.sh
  log_info "prepare etcd/flanneld/kubernetes package and distribute all other hosts"
  sh ${RUNDIR}/etcd_inst.sh
  source  ~/.bash_profile
  sh ${RUNDIR}/etcd_conf.sh
  if [ $RC -gt 0 ]; then
      do_exit 8
  else
      log_info "End of etcd configure RC=${RC}" 
  fi
  sh ${RUNDIR}/flanneld_inst.sh
  flanneld_network_init
  sh ${RUNDIR}/flanneld.sh
  if [ $RC -gt 0 ]; then
      do_exit 8
  else
      log_info "End of etcd flanneld RC=${RC}" 
  fi
  sh ${RUNDIR}/docker.sh
  sh ${RUNDIR}/kubernetes_inst.sh
  sh ${RUNDIR}/kubeconfig.sh 
  sh ${RUNDIR}/kube-apiserver.sh
  sh ${RUNDIR}/kube-controller-manager.sh
  sh ${RUNDIR}/kube-schedule.sh
  sh ${RUNDIR}/kube-proxy.sh
  sh ${RUNDIR}/kubelet.sh
  kubecommandcompletion
}

node_update(){
  log_info "distribute script to all nodes"
  for k8files in $(ls ~/*.sh)
      do 
          sh ${RUNDIR}/xsync -d $k8files
      done
  sh ${RUNDIR}/xsync -d ~/check_port.py
  sh ${RUNDIR}/xsync -d ~/functions.ksh

  log_info "distribute script to all nodes done"
  if [[ $(cat ~/.bash_profile |grep -i master-slave.sh|wc -l) -gt 0 ]]; then 
      log_info "kubernetes enviroment is already setup"
  else
      echo "if [ -f ~/master-slave.sh ]; then "   >> ~/.bash_profile
      echo "    . ~/master-slave.sh"              >> ~/.bash_profile
      echo "fi"                                   >> ~/.bash_profile
      log_info "kubernetes enviroment is  setup done"
  fi

  source  ~/.bash_profile
  cd ${RUNDIR}
  sh ${RUNDIR}/xsync -d ~/.bash_profile
}
#================================================================
# set kubernet master slave mode 
#================================================================
masterslave()
{ 
  node_update

  sh ${RUNDIR}/parallers.sh -h "${NODE_NAMES[@]}" -c ${RUNDIR}/master-slave.sh
  log_info "Parepare script done,start deploy kubernetes master and slave mode now"

  log_info "prepare enviroment for all node " 
  sh ${RUNDIR}/parallers.sh -h "${MS_NODE_NAMES[@]}" -c ${RUNDIR}/k8sprepare.sh

  log_info "prepare enviroment for all master node"
  sh ${RUNDIR}/parallers.sh -h "${MS_NODE_NAMES[@]}" -c ${RUNDIR}/master_stand_conf.sh

  log_info "install docker for all nodes"
  sh ${RUNDIR}/parallers.sh -h "${MS_NODE_NAMES[@]}" -c ${RUNDIR}/docker_inst.sh

  log_info "prepare certification generate software"
  sh ${RUNDIR}/cfssl_inst.sh

  log_info "generate certification"
  sh ${RUNDIR}/gencert.sh

  log_info "prepare etcd/flanneld/kubernetes package and distribute all other hosts"
  sh ${RUNDIR}/etcd_inst.sh 
  sh ${RUNDIR}/flanneld_inst.sh 
  sh ${RUNDIR}/kubernetes_inst.sh
  sh ${RUNDIR}/xsync -d ~/.bash_profile

  log_info "init etcd cluster "
  sh ${RUNDIR}/parallers.sh -h "${ETCD_NODE_NAMES[@]}" -c ${RUNDIR}/etcd_conf.sh
  RC=$?
  log_info "End of etcd configure RC=${RC}" | tee -a ${LogFile}
  if [ $RC -gt 0 ]; then
      do_exit 8
  fi
  
  log_info "configure etcd cluster network for flanneld"
  flanneld_network_init
  sh ${RUNDIR}/parallers.sh -h "${NODE_NAMES[@]}" -c ${RUNDIR}/flanneld.sh
  if [ $RC -gt 0 ]; then
      do_exit 8
  else
      log_info "End of etcd flanneld RC=${RC}" | tee -a ${LogFile}
  fi
  
  log_info "start configure docker"
  sh ${RUNDIR}/parallers.sh -h "${NODE_NAMES[@]}" -c ${RUNDIR}/docker.sh

  log_info "generate kubeconfige for kubectl kube-apiserver kube-contorller-manager kuebe-schedule kubelet and kube-proxy"
  sh ${RUNDIR}/kubeconfig.sh

  log_info "generate and start  kube-apiserver "
  sh ${RUNDIR}/parallers.sh -h "${MS_NODE_NAMES[@]}" -c ${RUNDIR}/kube-apiserver.sh
  log_info "generate and start  kube-controller-manager"
  sh ${RUNDIR}/parallers.sh -h "${MS_NODE_NAMES[@]}" -c ${RUNDIR}/kube-controller-manager.sh
  log_info "generate and start  kube-schedule "
  sh ${RUNDIR}/parallers.sh -h "${MS_NODE_NAMES[@]}" -c ${RUNDIR}/kube-schedule.sh

  log_info "generate and start  kube-proxy "
  sh ${RUNDIR}/parallers.sh -h "${NODE_NAMES[@]}" -c ${RUNDIR}/kube-proxy.sh
  log_info "generate and start  kubelet "
  sh ${RUNDIR}/parallers.sh -h "${NODE_NAMES[@]}" -c ${RUNDIR}/kubelet.sh
}

#================================================================
# set kubernet cluster mode (multi master)
#================================================================
cluster()
{ 
  node_update
  
  sh ${RUNDIR}/parallers.sh -h "${NODE_NAMES[@]}" -c ${RUNDIR}/cluster.sh
  log_info "Parepare script done,start deploy kubernetes cluster mode now"
}

##########################################################
#                       MAIN                             #
##########################################################

{
  cp -p ${RUNDIR}/{*.sh,*.py,*.ksh,xsync} ~

  case $1 in
        st)
          standalone
          ;;
        cl)
          cluster
          ;;
        ms)
          masterslave
          ;;
        *)
          usage
          ;;
  esac

  kcheck

  echo "${RC}" >/tmp/RC.$$
  log_info ""
  log_info "RC=${RC}"
  log_info ""
} 2>&1 | tee -a $LogFile

if [ -f /tmp/RC.$$ ]; then
    RC=$(cat /tmp/RC.$$)
    rm -f /tmp/RC.$$
fi
if [ "$RC" == "0" ]; then
    log_info   "OK: EndofScript ${scriptname} "    | tee -a $LogFile
else
    log_error  "ERROR: EndofScript ${scriptname} " | tee -a $LogFile
fi

ende=$(date +%s)
diff=$((ende - starttime))
log_info     "$(date)   Runtime      :   $diff"  | tee -a $LogFile
log_info     "Save log to ${LogFile}         "   | tee -a $LogFile
echo -e "$(kubectl get nodes)""\n\n""$(kubectl get cs)" |mail -s "deploy kubenernets result RC=$RC on $(hostname)" motingxia@163.com |tee -a $LogFile
logrename  ${LogFile}
exit ${RC}